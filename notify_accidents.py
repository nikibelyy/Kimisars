#!/usr/bin/env python3
"""
notify_accidents.py
–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä –º–∞—è—á–∫–æ–≤ –î–¢–ü —Å —Å–∞–π—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –≤ Telegram.

–ù–∞—Å—Ç—Ä–æ–π–∫–∞:
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –Ω–∏–∂–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–∫ –¥–µ–º–æ–Ω –∏–ª–∏ —á–µ—Ä–µ–∑ cron.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install requests beautifulsoup4 python-dateutil
"""

import os
import time
import json
import re
import requests
from bs4 import BeautifulSoup
from dateutil import parser as dateparser
from typing import List, Dict, Any

SITE_URL = "https://nikibelyy.github.io/Kimisars/"  # –≤–∞—à —Å–∞–π—Ç
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "PUT_YOUR_TOKEN_HERE")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "PUT_YOUR_CHAT_ID_HERE")
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 300 –∏–ª–∏ 600)
SEEN_FILE = "seen.json"
USER_AGENT = "AccidentNotifier/1.0 (+https://example.com)"

session = requests.Session()
session.headers.update({"User-Agent": USER_AGENT, "Accept": "text/html,application/json"})

def load_seen() -> Dict[str, Any]:
    if os.path.exists(SEEN_FILE):
        try:
            return json.load(open(SEEN_FILE, "r", encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_seen(d: Dict[str, Any]):
    json.dump(d, open(SEEN_FILE, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

def send_telegram(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    try:
        r = session.post(url, data=payload, timeout=15)
        r.raise_for_status()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

def try_fetch_json_from_page(soup: BeautifulSoup) -> Any:
    # –ò—â–µ–º <script type="application/json"> –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ .json
    script_tags = soup.find_all("script")
    # 1) —Å–Ω–∞—á–∞–ª–∞ –∏—Å–∫–∞—Ç—å —Ç–µ–≥–∏ —Å type application/json
    for s in script_tags:
        t = s.get("type","")
        if "application/json" in t and s.string:
            try:
                return json.loads(s.string)
            except Exception:
                pass
    # 2) –∏—Å–∫–∞—Ç—å –≤ –∫–æ–¥–µ —è–≤–Ω—ã–π URL –Ω–∞ .json
    html = str(soup)
    m = re.search(r"https?://[^\s'\"<>]+\.json", html)
    if m:
        url = m.group(0)
        try:
            r = session.get(url, timeout=15)
            r.raise_for_status()
            return r.json()
        except Exception:
            pass
    return None

def try_extract_points_from_js(soup: BeautifulSoup) -> List[Dict[str,Any]]:
    html = str(soup)
    # –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã/–º–∞—Å—Å–∏–≤—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ GeoJSON: "features": [...]
    m = re.search(r'("features"\s*:\s*\[.*?\])', html, flags=re.S)
    if m:
        fragment = "{" + m.group(1) + "}"
        try:
            data = json.loads(fragment)
            features = data.get("features", [])
            return features
        except Exception:
            pass
    # –ò—â–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ [{lat:..., lng:..., ...}, ...]
    m2 = re.search(r'(\[{\s*["\']?lat["\']?\s*[:=].*?\}\])', html, flags=re.S)
    if m2:
        arr_text = m2.group(1)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É JSON: –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
        try:
            arr_text_json = arr_text.replace("'", '"')
            # —É–±—Ä–∞—Ç—å trailing commas
            arr_text_json = re.sub(r",\s*}", "}", arr_text_json)
            arr_text_json = re.sub(r",\s*\]", "]", arr_text_json)
            data = json.loads(arr_text_json)
            return data
        except Exception:
            pass
    return []

def normalize_feature(feat: Dict[str,Any]) -> Dict[str,Any]:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: id, lat, lon, time, text
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º GeoJSON Feature –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
    out = {"id": None, "lat": None, "lon": None, "time": None, "text": None}
    if "geometry" in feat and feat.get("geometry"):
        geom = feat["geometry"]
        coords = geom.get("coordinates")  # [lon, lat]
        if isinstance(coords, list) and len(coords) >= 2:
            out["lon"], out["lat"] = coords[0], coords[1]
    # —Å–≤–æ–π—Å—Ç–≤–∞
    props = feat.get("properties") or feat
    # –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
    for key in ("id", "uid", "ID", "uuid"):
        if key in feat:
            out["id"] = str(feat[key])
            break
    if not out["id"] and isinstance(props, dict):
        for key in ("id", "uid", "ID", "uuid"):
            if key in props:
                out["id"] = str(props[key]); break
    # –≤—Ä–µ–º—è/–æ–ø–∏—Å–∞–Ω–∏–µ
    if isinstance(props, dict):
        for tkey in ("time","timestamp","created_at","date","dt"):
            if tkey in props:
                try:
                    out["time"] = str(props[tkey])
                except:
                    pass
                break
        for dkey in ("description","desc","title","text","note","address"):
            if dkey in props:
                out["text"] = str(props[dkey]); break
    # –µ—Å–ª–∏ lat/lon –µ—â—ë –Ω–µ—Ç ‚Äî –∏—Å–∫–∞—Ç—å –ø—Ä—è–º—ã–µ –ø–æ–ª—è
    for latk in ("lat","latitude","y"):
        if not out["lat"] and latk in props:
            out["lat"] = float(props[latk])
    for lnk in ("lon","lng","longitude","x"):
        if not out["lon"] and lnk in props:
            out["lon"] = float(props[lnk])
    # –µ—Å–ª–∏ id –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–±—Ä–∞—Ç—å —Ö—ç—à –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç+–æ–ø–∏—Å–∞–Ω–∏—è
    if not out["id"]:
        out["id"] = f"{out.get('lat')}-{out.get('lon')}-{(out.get('text') or '')}"[:120]
    return out

def find_points_from_site(url: str) -> List[Dict[str,Any]]:
    try:
        r = session.get(url, timeout=15)
        r.raise_for_status()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", e)
        return []
    soup = BeautifulSoup(r.text, "html.parser")
    # 1) –ø—Ä–æ–±—É–µ–º —è–≤–Ω—ã–π JSON/GeoJSON
    parsed = try_fetch_json_from_page(soup)
    points = []
    if parsed:
        # –µ—Å–ª–∏ GeoJSON
        if isinstance(parsed, dict) and "features" in parsed:
            for f in parsed["features"]:
                points.append(normalize_feature(f))
            return points
        # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫
        if isinstance(parsed, list):
            for item in parsed:
                points.append(normalize_feature(item))
            return points
    # 2) –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ JS-–∫–æ–¥–∞
    features = try_extract_points_from_js(soup)
    if features:
        for f in features:
            points.append(normalize_feature(f))
    # 3) fallback: –∏—Å–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç DOM —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ data-* –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    # (—Ä–µ–∂–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å)
    for tag in soup.find_all(attrs=True):
        for (k, v) in tag.attrs.items():
            if isinstance(v, str) and ("lat" in k.lower() or "lng" in k.lower()):
                try:
                    lat = float(v) if "lat" in k.lower() else None
                    lon = float(v) if "lng" in k.lower() or "lon" in k.lower() else None
                    if lat and lon:
                        points.append({"id": f"{lat}-{lon}", "lat": lat, "lon": lon, "time": None, "text": tag.get_text(strip=True)})
                except:
                    pass
    return points

def format_message(p: Dict[str,Any]) -> str:
    lat = p.get("lat")
    lon = p.get("lon")
    text = p.get("text") or "–î–¢–ü"
    t = p.get("time")
    msg = f"üö® <b>–ù–æ–≤—ã–π –º–∞—è—á–æ–∫ –î–¢–ü</b>\n{text}\n"
    if t:
        msg += f"üïí {t}\n"
    if lat and lon:
        map_link = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
        msg += f"üìç <a href=\"{map_link}\">–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n"
    return msg

def main_loop():
    seen = load_seen()
    while True:
        try:
            points = find_points_from_site(SITE_URL)
            # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
            new_count = 0
            for p in points:
                pid = p.get("id")
                if not pid:
                    continue
                if pid in seen:
                    continue
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = format_message(p)
                print("Sending:", msg)
                send_telegram(msg)
                seen[pid] = {"sent_at": time.time(), "meta": p}
                new_count += 1
            if new_count:
                save_seen(seen)
            else:
                print(time.strftime("%Y-%m-%d %H:%M:%S"), "‚Äî –Ω–æ–≤—ã—Ö –º–∞—è—á–∫–æ–≤ –Ω–µ—Ç")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:", e)
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    if TELEGRAM_BOT_TOKEN.startswith("PUT_") or TELEGRAM_CHAT_ID.startswith("PUT_"):
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ.")
    else:
        main_loop()
